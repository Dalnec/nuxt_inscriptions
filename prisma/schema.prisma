generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgres://postgres.juadtkewsbgtnwtugafl:07712546150990+@aws-0-sa-east-1.pooler.supabase.com:5432/postgres?pgbouncer=true"
}

model PaymentMethod {
  id          Int           @id @default(autoincrement())
  description String        @unique @db.VarChar(50)
  account     String?       @db.VarChar(50)
  icon        String?       @db.VarChar(100)
  active      Boolean       @default(true)
  Inscription Inscription[]

  @@map("paymentmethod")
}

model DocumentType {
  id          String   @id @db.VarChar(2)
  description String   @unique() @db.VarChar(200)
  active      Boolean  @default(true)
  persons     Person[]

  @@map("documenttype")
}

enum TypePerson {
  PASTOR        @map("P")
  MIEMBROACTIVO @map("M")
  INVITADO      @map("I")
}

model Person {
  id              Int           @id @default(autoincrement())
  created         DateTime      @default(now())
  modified        DateTime      @updatedAt
  code            String?       @db.VarChar(20)
  doc_num         String        @unique @db.VarChar(15)
  names           String        @db.VarChar(100)
  lastnames       String        @db.VarChar(100)
  gender          String?       @db.VarChar(1)
  birthday        DateTime?     @db.Date
  phone           String?       @db.VarChar(11)
  email           String?       @db.VarChar(100)
  church          String?       @db.VarChar(100)
  status          Boolean       @default(true)
  type_person     TypePerson?
  documenttype    DocumentType? @relation(fields: [documenttype_id], references: [id])
  documenttype_id String?       @db.VarChar(1)
  user            User?         @relation(fields: [userId], references: [id])
  userId          Int?
  Inscription     Inscription[]

  @@map("person")
}

enum StatusInscription {
  PENDIENTE  @map("P")
  CONFIRMADO @map("C")
  REGISTRADO @map("R")
  ERROR      @map("E")
}

model Inscription {
  id              Int                @id @default(autoincrement())
  created         DateTime           @default(now())
  modified        DateTime           @updatedAt
  checkinAt       DateTime?
  status          StatusInscription? @default(PENDIENTE)
  countgroup      Int
  vouchergroup    String             @db.VarChar(100)
  voucherpath     String             @db.VarChar(255)
  voucheramount   Decimal            @db.Decimal(10, 2)
  amount          Decimal            @db.Decimal(10, 2)
  person          Person             @relation(fields: [personId], references: [id])
  personId        Int
  paymentmethod   PaymentMethod?     @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId Int?

  @@map("inscription")
}

model Profile {
  id          Int     @id @default(autoincrement())
  description String?
  users       User[]

  @@map("profile")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  persons   Person[]
  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId Int?

  @@map("user")
}
