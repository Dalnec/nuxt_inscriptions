generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PaymentMethod {
  id          Int       @id @default(autoincrement())
  description String    @unique @db.VarChar(255)
  active      Boolean   @default(true)
  vouchers    Voucher[]

  @@map("paymentmethod")
}

model DocumentType {
  id          String   @id @db.VarChar(2)
  description String   @unique() @db.VarChar(200)
  active      Boolean  @default(true)
  persons     Person[]

  @@map("documenttype")
}

model Person {
  id              Int               @id @default(autoincrement())
  created         DateTime          @default(now())
  modified        DateTime          @updatedAt
  code            String?           @db.VarChar(20)
  doc_num         String            @unique @db.VarChar(15)
  firstname       String            @db.VarChar(100)
  lastname        String            @db.VarChar(100)
  gender          String?           @db.VarChar(1)
  birthday        DateTime?         @db.Date
  phone           String?           @db.VarChar(11)
  email           String?           @db.VarChar(100)
  church          String?           @db.VarChar(100)
  status          Boolean           @default(true)
  documenttype    DocumentType?     @relation(fields: [documenttype_id], references: [id])
  documenttype_id String?           @db.VarChar(1)
  user            User?             @relation(fields: [userId], references: [id])
  userId          Int?
  VouchersPersons VouchersPersons[]

  @@map("person")
}

model Voucher {
  id              Int               @id @default(autoincrement())
  created         DateTime          @default(now())
  modified        DateTime          @updatedAt
  code            String?           @db.VarChar(20)
  picture         String?           @db.VarChar(50)
  path            String?           @db.VarChar(255)
  VouchersPersons VouchersPersons[]
  paymentmethod   PaymentMethod?    @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId Int?

  @@map("voucher")
}

model VouchersPersons {
  id         Int      @id @default(autoincrement())
  person     Person   @relation(fields: [personId], references: [id])
  personId   Int // relation scalar field (used in the `@relation` attribute above)
  voucher    Voucher  @relation(fields: [voucherId], references: [id])
  voucherId  Int // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  assignedBy String
  checkinAt  DateTime
  checkin    Boolean  @default(false)

  @@map("voucherspersons")
}

model Profile {
  id          Int     @id @default(autoincrement())
  description String?
  users       User[]

  @@map("profile")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  persons   Person[]
  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId Int?

  @@map("user")
}
